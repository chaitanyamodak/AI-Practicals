
#include <iostream>
#include <vector>

using namespace std;

bool dfs(vector<vector<char>>& grid, int x, int y) {
    if (grid[x][y] == 'B')
        return true;

    grid[x][y] = '#';

    if (x > 0 && grid[x - 1][y] != '#' && dfs(grid, x - 1, y))
        return true;
    if (x < grid.size() - 1 && grid[x + 1][y] != '#' && dfs(grid, x + 1, y))
        return true;
    if (y > 0 && grid[x][y - 1] != '#' && dfs(grid, x, y - 1))
        return true;
    if (y < grid[0].size() - 1 && grid[x][y + 1] != '#' && dfs(grid, x, y + 1))
        return true;

    return false;
}

int main() {
    vector<vector<char>> grid = {
        {'S', '.', '.', '.', '.'},
        {'#', '#', '#', '.', '.'},
        {'.', '.', '#', '.', '.'},
        {'.', '.', '#', '#', '#'},
        {'.', '.', '.', '.', 'B'}
    };

    int startX, startY;
    for (int i = 0; i < grid.size(); ++i) {
        for (int j = 0; j < grid[i].size(); ++j) {
            if (grid[i][j] == 'S') {
                startX = i;
                startY = j;
            }
        }
    }

    if (dfs(grid, startX, startY))
        cout << "Monkey reached banana." << endl;
    else
        cout << "Monkey cannot reach banana." << endl;

    return 0;
}

Output : Monkey can not reach banana
